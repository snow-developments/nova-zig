<?xml version="1.0" encoding="UTF-8"?>
<!-- See https://ziglang.org/documentation/master/#Grammar -->
<syntax name="zig" xmlns="https://www.nova.app/syntax">
    <meta>
        <name>Zig</name>
        <type>compiled</type>
        <preferred-file-extension>zig</preferred-file-extension>
    </meta>
    
    <detectors>
        <extension priority="1.0">zig</extension>
    </detectors>
    
    <!-- TODO: Audit indentation rules for Zig blocks, e.g. {}, etc. -->
    <indentation>
        <increase>
            <expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
        </increase>
        <decrease>
            <expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
        </decrease>
    </indentation>
    
    <comments>
        <single>
            <expression>//</expression>
        </single>
        <!-- TODO: Does Zig support multiline comments? -->
        <!-- <multiline>
            <starts-with>
                <expression>&lt;!--</expression>
            </starts-with>
            <ends-with>
                <expression>--&gt;</expression>
            </ends-with>
        </multiline> -->
    </comments>
    
    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>
    
    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&apos;" close="&apos;" />
        <pair open="&quot;" close="&quot;" />
        <pair open="`" close="`" />
    </surrounding-pairs>
    
    <scopes>
        <!-- Meta -->
        <scope name="zig.meta.processing">
            <starts-with>
                <expression>&lt;\?zig</expression>
            </starts-with>
            <ends-with>
                <expression>\?&gt;</expression>
            </ends-with>
        </scope>
        <scope name="zig.meta.declaration">
            <starts-with>
                <expression>&lt;!(?i:DOCTYPE)</expression>
            </starts-with>
            <ends-with>
                <expression>&gt;</expression>
            </ends-with>
        </scope>
        <scope name="zig.meta.cdata">
            <starts-with>
                <expression>&lt;!\[(?i:CDATA)\[</expression>
            </starts-with>
            <ends-with>
                <expression>\]\]&gt;</expression>
            </ends-with>
            <subscopes />
        </scope>
        
        <!-- Comments -->
        <scope name="zig.comment.doc" spell-check="true">
            <expression>\/\/\/([^\n]* [ \n]*)</expression>
        </scope>
        <scope name="zig.comment.doc.container" spell-check="true">
            <expression>\/\/\!([^\n]* [ \n]*)</expression>
        </scope>
        
        <!-- Multi-line Strings -->
        <scope name="zig.string.multiline">
            <expression>\\\\([^\n]* [ \n]*)</expression>
        </scope>

        <!-- Keywords -->
        <include syntax="self" collection="keywords" />
        <!-- Blocks -->
        <scope name="zig.block">
            <starts-with>
                <expression>\{</expression>
                <capture number="0" name="zig.block.body.bracket" />
            </starts-with>
            <ends-with>
                <expression>\}</expression>
                <capture number="0" name="zig.block.body.bracket" />
            </ends-with>
        </scope>

        <include syntax="self" collection="numbers" />
        <include syntax="self" collection="strings" />
        <include syntax="self" collection="identifiers" />
        
        <!-- Inline Assembly -->
        <scope name="zig.assembly">
            <starts-with>
                <expression>\b(asm)\s+(volatile)\s+(\()</expression>
                <capture number="1" name="zig.keyword.asm" />
                <capture number="2" name="zig.keyword.volatile" />
                <capture number="3" name="zig.assembly.paren.left" />
            </starts-with>
            <ends-with>
                <expression>(\))</expression>
                <capture number="1" name="zig.assembly.paren.right" />
            </ends-with>
            <subsyntax name="assembly">
            </subsyntax>
        </scope>
    </scopes>
    
    <collections>
        <!-- Keywords -->
        <collection name="keywords">
            <scope name="zig.keyword">
                <symbol type="keyword" />
                <strings>
                    <string>align</string>
                    <string>allowzero</string>
                    <string>and</string>
                    <string>anyframe</string>
                    <string>anytype</string>
                    <string>asm</string>
                    <string>async</string>
                    <string>await</string>
                    <string>break</string>
                    <string>callconv</string>
                    <string>catch</string>
                    <string>comptime</string>
                    <string>const</string>
                    <string>continue</string>
                    <string>defer</string>
                    <string>else</string>
                    <string>enum</string>
                    <string>errdefer</string>
                    <string>error</string>
                    <string>export</string>
                    <string>extern</string>
                    <string>fn</string>
                    <string>for</string>
                    <string>if</string>
                    <string>inline</string>
                    <string>noalias</string>
                    <string>nosuspend</string>
                    <string>noinline</string>
                    <string>opaque</string>
                    <string>or</string>
                    <string>orelse</string>
                    <string>packed</string>
                    <string>pub</string>
                    <string>resume</string>
                    <string>return</string>
                    <string>linksection</string>
                    <string>struct</string>
                    <string>suspend</string>
                    <string>switch</string>
                    <string>test</string>
                    <string>threadlocal</string>
                    <string>try</string>
                    <string>union</string>
                    <string>unreachable</string>
                    <string>usingnamespace</string>
                    <string>var</string>
                    <string>volatile</string>
                    <string>while</string>
                </strings>
            </scope>
        </collection>
        
        <!-- Numbers -->
        <collection name="numbers">
            <scope name="zig.number.float">
                <!-- TODO: Add `bin_int`, `oct_int`, and `hex_int` -->
                <expression>([0-9]_?[0-9])+([eE][-+]?([0-9]_?[0-9])+)?</expression>
            </scope>
            <scope name="zig.number.integer">
                <!-- TODO: Add `bin_int`, `oct_int`, and `hex_int` -->
                <expression>(([0-9]_?[0-9])+)</expression>
            </scope>
        </collection>
        
        <!-- Strings -->
        <collection name="strings">
            <scope name="zig.char.char">
                <!-- See char_char -->
                <!-- TODO: mb_utf8_literal -->
                <expression>(\\x[0-9a-fA-F][0-9a-fA-F]|\\u\{[0-9a-fA-F]+\}|\\[nr\\t'"]|[\000-\011\013-\046-\050-\133\135-\177])</expression>
            </scope>
            <scope name="zig.string.char">
                <!-- See `string_char` -->
                <expression>(\\x[0-9a-fA-F][0-9a-fA-F]|\\u\{[0-9a-fA-F]+\}|\\[nr\\t'"]|[^\\"\n])</expression>
            </scope>
            <scope name="zig.string.line" spell-check="true">
                <!-- See `line_string` -->
                <expression>(\\\\)(^\n]* [ \n]*)</expression>
                <capture number="1" name="zig.string.line.start" />
                <capture number="2" name="zig.string.line.body" />
            </scope>
            <scope name="zig.string.literal" spell-check="true">
                <!-- See `STRINGLITERAL` -->
                <starts-with>
                    <expression>(\")</expression>
                    <capture number="1" name="zig.string.quot.left" />
                </starts-with>
                <ends-with>
                    <expression>(\")</expression>
                    <capture number="1" name="zig.string.quot.right" />
                </ends-with>
            </scope>
        </collection>

        <!-- Identifiers -->
        <collection name="identifiers">
            <scope name="zig.identifiers.identifier.plain">
                <expression>([A-Za-z_] [A-Za-z0-9_]*)</expression>
            </scope>
            <scope name="zig.identifiers.identifier.string">
            <starts-with>
                <expression>(@\")</expression>
                <capture number="2" name="zig.identifiers.string.quot.left" />
            </starts-with>
            <ends-with>
                <expression>(\")</expression>
                <capture number="1" name="zig.identifiers.string.quot.right" />
            </ends-with>
            </scope>
            <scope name="zig.identifiers.identifier.builtin">
                <expression>(([0-9]_?[0-9])+)</expression>
            </scope>
        </collection>
    </collections>
</syntax>
