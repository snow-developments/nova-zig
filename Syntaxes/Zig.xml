<?xml version="1.0" encoding="UTF-8"?>
<syntax name="zig" xmlns="https://www.nova.app/syntax">
    <meta>
        <name>Zig</name>
        <type>compiled</type>
        <preferred-file-extension>zig</preferred-file-extension>
    </meta>
    
    <detectors>
        <extension priority="1.0">zig</extension>
    </detectors>
    
    <!-- See https://ziglang.org/documentation/master/#Grammar -->
    
    <!-- TODO: Audit indentation rules for Zig blocks, e.g. {}, etc. -->
    <indentation>
        <increase>
            <expression>(\{[^}\"']*$)|(\[[^\]\"']*$)|(\([^)\"']*$)</expression>
        </increase>
        <decrease>
            <expression>^\s*(\s*/\*.*\*/\s*)*[\}\]\)\\]</expression>
        </decrease>
    </indentation>
    
    <comments>
        <single>
            <expression>//</expression>
        </single>
    </comments>

    <brackets>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
    </brackets>
    
    <surrounding-pairs>
        <pair open="{" close="}" />
        <pair open="[" close="]" />
        <pair open="(" close=")" />
        <pair open="&quot;" close="&quot;" />
    </surrounding-pairs>
    
    <scopes>
        <include syntax="self" collection="declarations" />

        <scope name="zig.struct">
            <symbol type="struct">
                <context behavior="subtree" />
            </symbol>
            <starts-with>
                <expression>(const)\s+([A-Za-z_][A-Za-z0-9_]*)\s=\s(struct|packed\s+struct)\s(\{)</expression>
                <capture number="1" name="zig.keyword.const" />
                <capture number="2" name="zig.struct.name" />
                <capture number="3" name="zig.keyword.struct" />
                <capture number="4" name="zig.bracket" />
            </starts-with>
            <ends-with>
                <expression>\}</expression>
                <capture number="0" name="zig.bracket" />
            </ends-with>
            <subscopes>
                <include syntax="self" collection="members" />
            </subscopes>
        </scope>
        <scope name="zig.union">
            <symbol type="union">
                <context behavior="subtree" />
            </symbol>
            <starts-with>
                <expression>(const)\s+([A-Za-z_][A-Za-z0-9_]*)\s+=\s+(union)\s+(\{)</expression>
                <capture number="1" name="zig.keyword.const" />
                <capture number="2" name="zig.struct.name" />
                <capture number="3" name="zig.keyword.union" />
                <capture number="4" name="zig.bracket" />
            </starts-with>
            <ends-with>
                <expression>\}</expression>
                <capture number="0" name="zig.bracket" />
            </ends-with>
            <subscopes>
                <include syntax="self" collection="members" />
            </subscopes>
        </scope>
        <scope name="zig.enum">
            <symbol type="enum">
                <context behavior="subtree" />
            </symbol>
            <starts-with>
                <expression>(const)\s+([A-Za-z_][A-Za-z0-9_]*)\s+=\s+(enum)</expression>
                <capture number="1" name="zig.keyword.const" />
                <capture number="2" name="zig.enum.name" />
                <capture number="3" name="zig.keyword.enum" />
            </starts-with>
            <ends-with />
            <subscopes anchored="true">
                <scope name="zig.enum.type" optional="true">
                    <starts-with>
                        <expression>\(</expression>
                    </starts-with>
                    <ends-with>
                        <expression>\)</expression>
                    </ends-with>
                    <subscopes>
                        <include syntax="self" collection="keywords" />
                        <include syntax="self" collection="numbers" />
                        <include syntax="self" collection="strings" />
                        <include syntax="self" collection="identifiers" />
                    </subscopes>
                </scope>
                <scope name="zig.enum.members">
                    <symbol type="block">
                        <context behavior="subtree" />
                    </symbol>
                    <starts-with>
                        <expression>\{</expression>
                    </starts-with>
                    <ends-with>
                        <expression>\}</expression>
                    </ends-with>
                    <subscopes>
                        <include syntax="self" collection="members" />
                    </subscopes>
                </scope>
            </subscopes>
        </scope>
        
        <scope name="zig.function">
            <symbol type="function">
                <context behavior="subtree" />
            </symbol>
            <starts-with>
                <expression>(fn)\s+([^\(\s\n]*)\s*\([^\)]*\)\s+\{</expression>
                <capture number="1" name="zig.keyword.fn" />
                <capture number="2" name="zig.function.name" />
            </starts-with>
            <ends-with>
                <expression>\}</expression>
                <capture number="0" name="zig.bracket" />
            </ends-with>
            <subscopes>
                <include syntax="self" collection="declarations" />
            </subscopes>
        </scope>

        <!-- Tests -->
        <scope name="zig.declaration.test">
            <!-- TODO: Is `bookmark` the best symbol type for tests? -->
            <symbol type="bookmark">
                <context behavior="subtree" />
            </symbol>
            <starts-with>
                <expression>(test)\s+&quot;([^&quot;]+)"\s+\{</expression>
                <capture number="1" name="zig.keyword.test" />
                <capture number="2" name="zig.test.name" />
            </starts-with>
            <ends-with>
                <expression>\}</expression>
                <capture number="0" name="zig.bracket" />
            </ends-with>
        </scope>

        <!-- Comments -->
        <scope name="zig.comment">
            <symbol type="comment" />
            <expression>\/\/\s*([^\n]*)</expression>
            <capture number="1" name="zig.comment" />
        </scope>
        <scope name="zig.comment.doc">
            <symbol type="comment" />
            <expression>\/\/\/\s*([^\n]*)</expression>
            <capture number="1" name="zig.comment" />
        </scope>
        <scope name="zig.comment.doc.container">
            <symbol type="comment" />
            <expression>\/\/\!\s*([^\n]*)</expression>
            <capture number="1" name="zig.comment" />
        </scope>
        
        <!-- Multi-line Strings -->
        <scope name="zig.string.multiline">
            <expression>\\\\([^\n]* [ \n]*)</expression>
        </scope>

        <include syntax="self" collection="keywords" />
        <inlude syntax="self" collection="containers" />

        <include syntax="self" collection="numbers" />
        <include syntax="self" collection="strings" />

        <!-- Inline Assembly -->
        <scope name="zig.assembly">
            <symbol type="expression">
                <context behavior="subtree" />
            </symbol>
            <starts-with>
                <expression>(asm)\s+(volatile)?\s*(\()</expression>
                <capture number="1" name="zig.keyword.asm" />
                <capture number="2" name="zig.keyword.volatile" />
                <capture number="3" name="zig.assembly.paren.left" />
            </starts-with>
            <ends-with>
                <expression>\)</expression>
                <capture number="0" name="zig.assembly.paren.right" />
            </ends-with>
            <subsyntax name="assembly">
            </subsyntax>
        </scope>
    </scopes>
    
    <collections>
        <collection name="keywords">
            <scope name="zig.keyword">
                <symbol type="keyword" />
                <strings>
                    <string>align</string>
                    <string>allowzero</string>
                    <string>and</string>
                    <string>anyframe</string>
                    <string>anytype</string>
                    <string>asm</string>
                    <string>async</string>
                    <string>await</string>
                    <string>break</string>
                    <string>callconv</string>
                    <string>catch</string>
                    <string>comptime</string>
                    <string>const</string>
                    <string>continue</string>
                    <string>defer</string>
                    <string>else</string>
                    <string>enum</string>
                    <string>errdefer</string>
                    <string>error</string>
                    <string>export</string>
                    <string>extern</string>
                    <string>fn</string>
                    <string>for</string>
                    <string>if</string>
                    <string>inline</string>
                    <string>noalias</string>
                    <string>nosuspend</string>
                    <string>noinline</string>
                    <string>opaque</string>
                    <string>or</string>
                    <string>orelse</string>
                    <string>packed</string>
                    <string>pub</string>
                    <string>resume</string>
                    <string>return</string>
                    <string>linksection</string>
                    <string>struct</string>
                    <string>suspend</string>
                    <string>switch</string>
                    <string>test</string>
                    <string>threadlocal</string>
                    <string>try</string>
                    <string>union</string>
                    <string>unreachable</string>
                    <string>usingnamespace</string>
                    <string>var</string>
                    <string>volatile</string>
                    <string>while</string>
                </strings>
            </scope>
        </collection>
        
        <collection name="declarations">
            <scope name="zig.constant">
                <symbol type="constant" />
                <expression>(const)\s+([A-Za-z_][A-Za-z0-9_]*)\s=\s(?!struct|packed\s+struct|enum|union)</expression>
                <capture number="1" name="zig.keyword.const" />
                <capture number="2" name="zig.constant.name" />
            </scope>
            <scope name="zig.variable">
                <symbol type="variable" />
                <expression>(var)\s+([A-Za-z_][A-Za-z0-9_]*)</expression>
                <capture number="1" name="zig.keyword.var" />
                <capture number="2" name="zig.constant.name" />
            </scope>
        </collection>
        
        <collection name="members">
            <scope name="zig.container.member">
                <symbol type="property" />
                <expression>(comptime)?\s+([A-Za-z_][A-Za-z0-9_]*)\s*:\s*((anytype)|[^,\s\n]+)</expression>
                <capture number="1" name="zig.keyword.comptime" />
                <capture number="2" name="zig.field.name" />
                <capture number="3" name="zig.field.type" />
                <capture number="4" name="zig.keyword.anytype" />
            </scope>
            <scope name="zig.container.enum.member">
                <symbol type="enum-member" />
                <expression>(comptime)?\s+([A-Za-z_][A-Za-z0-9_]*)\b</expression>
                <capture number="1" name="zig.keyword.comptime" />
                <capture number="2" name="zig.enum.member.name" />
            </scope>
        </collection>
        
        <collection name="expressions">
            <scope name="zig.expression.primary">
                <expression></expression>
                <cut-off>
                    <expression>;</expression>
                </cut-off>
                <subscopes>
                    <scope name="zig.expression.grouped">
                        <starts-with>
                            <expression>\(</expression>
                        </starts-with>
                        <ends-with>
                            <expression>\)</expression>
                        </ends-with>
                        <subscopes><include syntax="self" collection="expressions" /></subscopes>
                    </scope>
                    <include syntax="self" collection="numbers" />
                    <include syntax="self" collection="strings" />
                    <include syntax="self" collection="identifiers" />
                </subscopes>
            </scope>
        </collection>
        
        <collection name="numbers">
            <scope name="zig.number.float">
                <symbol type="expression" />
                <!-- TODO: Add `bin_int`, `oct_int`, and `hex_int` -->
                <expression>([0-9]_?[0-9])+([eE][-+]?([0-9]_?[0-9])+)?</expression>
            </scope>
            <scope name="zig.number.integer">
                <symbol type="expression" />
                <!-- TODO: Add `bin_int`, `oct_int`, and `hex_int` -->
                <expression>(([0-9]_?[0-9])+)</expression>
            </scope>
        </collection>
        <collection name="strings">
            <scope name="zig.char.char">
                <!-- See char_char -->
                <!-- TODO: mb_utf8_literal -->
                <expression>(\\x[0-9a-fA-F][0-9a-fA-F]|\\u\{[0-9a-fA-F]+\}|\\[nr\\t'"]|[\000-\011\013-\046-\050-\133\135-\177])</expression>
            </scope>
            <scope name="zig.string.char">
                <!-- See `string_char` -->
                <expression>(\\x[0-9a-fA-F][0-9a-fA-F]|\\u\{[0-9a-fA-F]+\}|\\[nr\\t'"]|[^\\"\n])</expression>
            </scope>
            <scope name="zig.string.line" spell-check="true">
                <!-- See `line_string` -->
                <expression>(\\\\)(^\n]* [ \n]*)</expression>
                <capture number="1" name="zig.string.line.start" />
                <capture number="2" name="zig.string.line.body" />
            </scope>
            <scope name="zig.string.literal" spell-check="true">
                <symbol type="expression" />
                <!-- See `STRINGLITERAL` -->
                <starts-with>
                    <expression>&quot;</expression>
                    <capture number="0" name="zig.string.quot.left" />
                </starts-with>
                <ends-with>
                    <expression>&quot;</expression>
                    <capture number="0" name="zig.string.quot.right" />
                </ends-with>
            </scope>
        </collection>
        <collection name="identifiers">
            <scope name="zig.identifier.plain">
                <expression>([A-Za-z_][A-Za-z0-9_]*)</expression>
            </scope>
            <scope name="zig.identifier.string">
                <starts-with>
                    <expression>@&quot;</expression>
                    <capture number="0" name="zig.string.quot.left" />
                </starts-with>
                <ends-with>
                    <expression>&quot;</expression>
                    <capture number="0" name="zig.string.quot.right" />
                </ends-with>
            </scope>
            <scope name="zig.identifier.builtin">
                <expression>(([0-9]_?[0-9])+)</expression>
            </scope>
        </collection>
    </collections>
</syntax>
